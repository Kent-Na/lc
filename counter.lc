
//sequental logic

counter_a : func metanum bit_width => module{
	reg bit[bit_width] count;
	in bit clock;

	clock on posedge{
		clock = clock + 1'b1;
	}
}

counter_b : func metanum bit_width => module{
	seq{
		s : func bit[bit_width] count => state{
			next s(count+1)
		}
	} i_state;

	out o;
	if i_state is s (bit count){
		o = count;
	}
}

