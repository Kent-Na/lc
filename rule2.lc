
//package_management

import package_name;
package package_name;
export export_idintifier_name;
export all;


//note: There are 3 functions HDL have. Simulate, Generate, Describe.
//note: Need document comment.

// Line comment

/* Multi line comment */

/+ Nestable multi line comment. (from D language) +/

////
//number

//integer(metanum)
//These are not concatinatable with other data.
//1
//30
//599


//integer with bit width (bit[n])

1'1//ok
10'400//ok
1'45 //error 

10'b10//binaly
10'd90//decimal
10'o72//oct
24'hBeef20//hex

//(bin, hex and oct)integer can contain any number of underbar 
//for visibility.

8'b0110_11__10 // = 8'b01101110

////
//types

bit = 0|1
logic = 0|1|x|z
bit[n] //n bit array

//metatypes
metanum //143
metastr 
//"text" Can cast to bit[n] type. Result are UTF-8 encoded 
//bit array. ex. "ab" == 16'h6162
metatime //4s 4ns 4ms ...
metafreq //10Hz 10MHz 5KHz

auto //(from c++11)

//cast rule

// meta_num -> bit
// bit -> logic

////
//scope
//just variable scope
scope{
	//body

	//and export variable
	export bit[20] value_for_export;
}

////
//function definition

//note: [Q]Can functions have multipul output?
//note: [A]Use struct!!

function_name : func input_1 -> input_2 -> input_n -> output{
	//body
}

////
//struct definition

//struct can contain meta value

struct_name : struct{
    type_name field_name;	
}

//template struct with func
struct_template_name : func params->struct{
	return struct{
		//fields
	}
}

//syntax suger. It reduce nest level by 1.
struct_template_name : func params=>struct{
	//fields
}

////
//function usage

// c lang style call
outputs = function_name(inputs)

// hdl style call (use as module)
function_name instance_name(inputs) // set input
outputs = instance_name

//lisp style call
outputs = (function_name inputs)

// compose
//inputs->function_name_1->function_name_2->outputs//if possible...
outputs = function_name_2(function_name_1(inputs))

////
//if and select

if condition_0 {

}
elif condition_1 {

}
else{

}

var = select input{
    case x -> a;
    case y -> b;
    default -> c;
}

//////////
//operaters
//

//field access
a.b

//bit concatinate
{1'1, 1'0} //2'10

//field concatinate
instance_name.{field_name_1, field_name_2}

//array access
a[12]
a[4:8] // = {a[4],a[5],a[6],a[7]}
a[4,8] // = {a[4],a[8]}
a[4:6,8] // = {a[4],a[5],a[8]}

//assign
= // right to left
<- // same as '='
-> // left to right
=[metatime]
<-[metatime] //delayed assign

a <-(5ns) 1'b0;

//operater
+ //add
- //sub
* //mul
/ //div

& //and
| //or
^ //xor

////
//module(state less)

module_name : module{
	in type field_name_1;
	out type field_name_2;
}

//Module array
module_name[10] instance_name;

//Module array signal auto concatinate
m_0 :module{
    in bit f_0;
}

m_0[3] i_0;
bit[3] var = i_0.f_0// = {i_0[0], i_0[1], i_0[1]}

////
//state machine(sync)

//note: What we needs are
//input
//output
//  Output signal are generated with "on" statement with outside register.
//state
//clock

//note: how to nest state machine?
//note: how to instantiate it?
//note: how to eliminate "reg"?
//note: how to access state of machine?
//note: how to determinate initial state?
//note: how to set initial state?
//note: How to receive external input?

/*
state_machine : module{
	bit clock;
	enumish_type state;
}
*/

clock on posedge{
    drive machine_instance;
}

machine_name : seq{
	state_name_0 : state{
		//this is blackholl state
	}

	state_name_1 : func param => state{
		next state_name_0;
	}

	//nested state
	state_name_2 : state{
		sub_state_0 : state{
			next sub_state_1;
		}
		sub_state_1 : state{
			next sub_state_1;
		}
	}
}

//note: pattern mach?

//wild card "_"

//note: can we use wild carded parameter value?
if machine.state is state_name(12xa03, _, _, 12){

}

//use machine.clock
state_machine on state_0 -> state_1{

}

////
//good old way. (or not?)

reg bit reg_0;
ratch bit ratch_0;

//on statement works like "always" of verilogHDL.
clock on 1'b0 -> 1'b1{
	//use reg here
}

//Keyword "posedge" or "negedge" can be used.
//posedge = 1'b0 -> 1'b1
//negedge = 1'b1 -> 1'b0
clock on posedge{
	//use reg here
}

//while statements are used for manipulate ratch.
while signal{
	//use ratch here
}

//"on init" block can be used to initialize reg/ratch.
on init{
    //initialise reg/ratch here
}
