//The line start with //** is deprecated specification.

//note: There are 3 functions HDL have. Simulate, Generate, Describe.
//note: Need document comment.

// Line comment

/* Multi line comment */

/+ Nestable multi line comment. (from D language) +/

////
//Types & literals
//

//basic types
bit      // 0|1
logic    // 0|1|x|z
bit[n]   // Array of "bit" with length "n"

//literals
1'1    //ok
10'400 //ok
1'45   //error 
//"45" require 6 bit which is greater than 1 bit which is greater than 1 bit

10'b10     //binaly
10'd90     //decimal
10'o72     //oct
24'hBeef20 //hex

//integer can contain any number of underbar for visibility.
8'b0110_11__10 // = 8'b01101110

//metatypes
metanum //143
metastr //"text" 
//"metastr" type can be cast to bit[n] type. Result are UTF-8 encoded 
//bit array. ex. "ab" == 16'h6162
metatime //4s 4ns 4ms ...
metafreq //10Hz 10MHz 5KHz

auto //(from c++11)

//////////
//operaters
//

//unary operator
& //and (bit[n] -> bit)
| //or  (bit[n] -> bit) inclucive or
^ //xor (bit[n] -> bit) parity
~ //not (bit[n] -> bit[n])
- //negate (bit[n] -> bit[n])

//binary operator
+ //add (bit[n] -> bit[n] -> bit[n])
- //sub (bit[n] -> bit[n] -> bit[n])
* //mul
/ //div

& //and (bit[n] -> bit[n] -> bit[n])
| //or  (bit[n] -> bit[n] -> bit[n])
^ //xor (bit[n] -> bit[n] -> bit[n])

== //equal     (bit[n] -> bit[n] -> bit)
!= //not equal (bit[n] -> bit[n] -> bit)

<> //bit concatinate (bit[n] -> bit[m] -> bit[n+m])
   //ex. 2'b01 <> 2'b11 => 4'b0111

//bit concatinate
{a, b, c}  //a <> b <> c
{1'1, 1'0} //2'10

//array access
a[12]
a[4:8] // = {a[4],a[5],a[6],a[7]}
a[4,8] // = {a[4],a[8]}
a[4:6,8] // = {a[4],a[5],a[8]}

//assign
= // right to left
=[metatime] //delayed assign

//ex.
a =[5ns] b; //Signal "a" forrow signal "b" with 5ns delay

//**<- // same as '='
//**-> // left to right
//**<-[metatime] //delayed assign (simration only)


////
//Struct
//

//Define
struct_name : struct{
    type_name_0 field_name_0;
    type_name_1 field_name_1;
    //Fields can have default value.
    bit[12] random_bit = 12'ha73;
}

//Field access
struct {bit f} s;
s.f

//field concatinate
instance_name.{field_name_1, field_name_2}
// = {instance_name.field_name_1, instance_name.field_name_2}

////
//Module
//

//Module is unit of a circuit.

counter_and_adder : module {
    //Assignable from outside of module, but not from inside.
    in bit reset;
    in bit clock;
    //Assignable from inside of module, but not from outside.
    out bit output_port;
    //5 bit Register.
    reg bit[5] counter;

    in bit[4] adder_in_a;
    in bit[4] adder_in_b;
    out bit[4] adder_out;

    //Value assign. Left hand value must be assignable, 
    //and same type as right hand value.
    output_port = (counter == 5'b11111);

    //On statement. Like verilogHDL's "always" block,
    //"Statements in this block only applied
    //on "positive edge" of signal "clock".
    clock on posedge{
        //If-elif-else statement. Statements in this block only applied on
        //specified condition.
        if reset == 1'b0 {
            counter = 5'b0;
        }
        else {
            //Incriment "a ++" will be processed as "a = a + 1"
            //on parse stage.
            counter ++;
        }
    }

    //You can define module inside module definition.
    adder : module{
        in bit[4] input_b;
        //And can use signal at outer module
        adder_out = adder_in_a + input_b;
    }

    //Instantiate module.
    //If you instantiate 2 "adder" modules, error will occur on compile
    //phase. Because of 2 "assignment" to "adder_out" signal.
    adder the_adder;
    
    //Field access and assign.
    adder.input_b = adder_in_b;
}

//Module array
module_name[10] instance_name;

//Module array signal auto concatinate
m_0 :module{
    in bit f_0;
}

m_0[3] i_0;
bit[3] var = i_0.f_0// = {i_0[0].f_0, i_0[1].f_0, i_0[2].f_0}

////
//function 
//

function_xor : func bit input -> bit more_input -> bit{
    return input^more_input; 
}

//Functions can also return another function, module, struct and etc.
v_length_adder : func metanum width -> module{
    //Variable bit width ALU module. Output sum of inputs.
	return module{
        in bit[width] input_a;
        in bit[width] input_b;
        in bit is_add; //1 -> add, 0 ->subtruct
        out bit[width] output;
        
        if is_add {
            output = input_a + input_b;
        }
        else{
            output = input_a - input_b;
        }
	}
}

//Syntax suger. It reduce a nest level.
struct_template : func metanum width => struct{
    bit[width] field;
}

//Function "call"
struct_template(21) instance_name;

  ///////////////////////////////////////
 // Under construction zone           //
///////////////////////////////////////

////
//function usage

// c lang style call
outputs = function_name(inputs)

//lisp style call
outputs = (function_name inputs)

// compose
//inputs->function_name_1->function_name_2->outputs//if possible...
outputs = function_name_2(function_name_1(inputs))

//** hdl style call (use as module)
//**function_name instance_name(inputs) // set input
//**outputs = instance_name

////
//if and select

if condition_0 {

}
elif condition_1 {

}
else{

}


////
//module(stateless)

module_name : module{
	in type field_name_1;
	out type field_name_2;
}


////
//state machine(sync)

//note: What we needs are
//input
//output
//  Output signal are generated with "on" statement with outside register.
//state
//clock

//note: how to nest state machine?
//note: how to instantiate it?
//note: how to eliminate "reg"?
//note: how to access state of machine?
//note: how to determinate initial state?
//note: how to set initial state?
//note: How to receive external input?

/*
state_machine : module{
	bit clock;
	enumish_type state;
}
*/

clock on posedge{
    drive machine_instance;
}

machine_name : seq{
	state_name_0 : state{
		//this is blackholl state
	}

	state_name_1 : func param => state{
		next state_name_0;
	}

	//nested state
	state_name_2 : state{
		sub_state_0 : state{
			next sub_state_1;
		}
		sub_state_1 : state{
			next sub_state_1;
		}
	}
}

////
//Conditional statements

//note: pattern mach?

//wild card "_"

//note: can we use wild carded parameter value?
if machine.state is state_name(12'ha03, _, _, 12){

}

//use machine.clock
state_machine on state_0 -> state_1{

}

////
//good old way. (or not?)

reg bit reg_0;
ratch bit ratch_0;

//on statement works like "always" of verilogHDL.
clock on 1'b0 -> 1'b1{
	//use reg here
}

//Keyword "posedge" or "negedge" can be used.
//posedge = 1'b0 -> 1'b1
//negedge = 1'b1 -> 1'b0
clock on posedge{
	//use reg here
}

//while statements are used for manipulate ratch.
while signal{
	//use ratch here
}

//"on init" block can be used to initialize reg/ratch.
on init{
    //initialise reg/ratch here
}


//Single line if concept

result = 
    if cond -> 
        value_0
    else ->
        value_1

//Select statement concept
//Value varsion
var = select input{
    case x -> a;
    case y -> b;
    default -> c;
}

//Statement varsion
select input{
    case x {
        a = 4'h2
    }
    default {
        b = 4'hc
    }
}

//struct modificater
m0 : struct{
    bit a;
}
m1 : add_field(m0, in bit, "b")
a m1;
a.b = 1'b1;

//package_management

import package_name;
package package_name;
export export_idintifier_name;
export all;


////
//scope
//just variable scope
scope{
	//body

	//and export variable
	export bit[20] value_for_export;
}

////
//cast rule


//self Q and A.

//note: [Q]Can functions have multipul output?
//note: [A]Use struct!!

