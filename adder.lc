////
//function var.

//note: Loocks not good...
//note: Should use "module" instead of "func"?

full_adder_n : func metanum n ->
	bit[n] a -> bit[n] b -> bit c_in -> (bit[n] out, bit c_out){

	full_adder fa
	full_adder_n(n-1) fav

	{fa.a, fav.a} <- a
	{fa.b, fav.b} <- b
	out <- {fa.out, fav.out}

	fav.c_in <- c_in
	fa.c_in <- fav.c_out
	c_out <- fa.c_out
}

////
//module var.

//recarsive
full_adder_n : func metanum n => module{
    in bit[n] a
    in bit[n] b
    in bit c_in

    out o[n] <- {fa.out, fav.out}
    out c_out <- fa.c_out

    full_adder fa
    full_adder_n(n-1) fav

    {fa.a, fav.a} <- a
    {fa.b, fav.b} <- b
    o <- {fa.out, fav.out}

    fav.c_in <- c_in
    fa.c_in <- fav.c_out
    c_out <- fa.c_out
}
	
//module array
full_adder_n : func metanum n => module{
    in bit[n] a
    in bit[n] b
    in bit c_in

    out o[n]
    out c_out 

	full_adder[n] fa
	fa.a = a
	fa.b = b

	c_out = fa.[n-1].c_out
	fa.c_in = {fa.c_out[n-2:], c_in}

	o = fa.o
}
